import { SuiClient } from '@mysten/sui/client';
import { Ed25519Keypair } from '@mysten/sui/keypairs/ed25519';
import { Transaction } from '@mysten/sui/transactions';
import * as dotenv from 'dotenv';

dotenv.config();

// Configuration
const TEST_MODE = process.env.TEST_MODE === 'true';
const MINT_TIME = new Date('2025-05-15T11:23:00+01:00'); // 2:00 PM WEST
const SUI_NETWORK = TEST_MODE ? 'testnet' : (process.env.SUI_NETWORK || 'mainnet');
const NFT_PACKAGE_ID = '0x1f468aaa1e906c4e7e87c7b4976ccca82693b7bdc51e380ae314b3a681bc0d8b';
const TEST_PACKAGE_ID = '0x5c8b5588ee7648bf89c55977f6e818e4d1a9fd8350a619c401d2eea5a8f22e80';
const MAX_RETRIES = 3;
const RETRY_DELAY = 100; // ms

// Initialize Sui client
const client = new SuiClient({
    url: SUI_NETWORK === 'mainnet' 
        ? 'https://fullnode.mainnet.sui.io:443'
        : 'https://fullnode.testnet.sui.io:443'
});

function getPrivateKeysFromEnv(): Buffer[] {
    return Object.entries(process.env)
        .filter(([key]) => key.startsWith('PRIVATE_KEY_'))
        .map(([, value]) => {
            if (!value) return null;
            const buf = Buffer.from(value, 'base64');
            return buf.slice(1, 33);
        })
        .filter((v): v is Buffer => !!v);
}

async function prepareMintTransaction(keypair: Ed25519Keypair): Promise<Transaction> {
    const tx = new Transaction();
    tx.moveCall({
        target: `${TEST_PACKAGE_ID}::nft::mint`,
        arguments: [
            tx.pure.string('Test NFT'),
            tx.pure.string('This is a test NFT'),
            tx.pure.string('https://example.com/nft.jpg'),
        ],
    });
    return tx;
}

async function executeMintTransaction(keypair: Ed25519Keypair, tx: Transaction, retryCount = 0): Promise<void> {
    try {
        const result = await client.signAndExecuteTransaction({
            signer: keypair,
            transaction: tx
        });
        console.log(`‚úÖ –ú–∏–Ω—Ç —É—Å–ø–µ—à–µ–Ω –¥–ª—è ${keypair.getPublicKey().toSuiAddress()}. Digest: ${result.digest}`);
    } catch (e) {
        if (retryCount < MAX_RETRIES) {
            console.log(`‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ ${retryCount + 1} –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è ${keypair.getPublicKey().toSuiAddress()}, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...`);
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            return executeMintTransaction(keypair, tx, retryCount + 1);
        }
        console.error(`‚ùå –ú–∏–Ω—Ç –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è ${keypair.getPublicKey().toSuiAddress()} –ø–æ—Å–ª–µ ${MAX_RETRIES} –ø–æ–ø—ã—Ç–æ–∫:`, e);
    }
}

async function checkMintTime(): Promise<boolean> {
    const now = new Date();
    return now >= MINT_TIME;
}

async function waitForMintTime(): Promise<void> {
    return new Promise((resolve) => {
        const interval = setInterval(async () => {
            if (await checkMintTime()) {
                clearInterval(interval);
                console.log('üéØ –í—Ä–µ–º—è –º–∏–Ω—Ç–∞ –Ω–∞—Å—Ç—É–ø–∏–ª–æ!');
                resolve();
            }
        }, 100);
    });
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –º–∏–Ω—Ç–∞ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Ç–∏
async function testMintOnTestnet(keypair: Ed25519Keypair) {
    console.log('üîó –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ testnet –∏ –ø–æ–ø—ã—Ç–∫–∞ –º–∏–Ω—Ç–∞ —á–µ—Ä–µ–∑ –Ω–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç...');
    const TEST_PACKAGE_ID = '0x5c8b5588ee7648bf89c55977f6e818e4d1a9fd8350a619c401d2eea5a8f22e80';
    try {
        const tx = new Transaction();
        tx.moveCall({
            target: `${TEST_PACKAGE_ID}::nft::mint`,
            arguments: [
                tx.pure.string('Test NFT'),
                tx.pure.string('This is a test NFT'),
                tx.pure.string('https://example.com/nft.jpg'),
            ],
        });
        const result = await client.signAndExecuteTransaction({
            signer: keypair,
            transaction: tx
        });
        console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! Digest:', result.digest);
    } catch (e) {
        const err = e as Error;
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –º–∏–Ω—Ç–µ:', err.message || e);
    }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–µ–ø–ª–æ—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–∞ testnet
async function deployTestContract(keypair: Ed25519Keypair) {
    console.log('üîó –¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ testnet –∏ –¥–µ–ø–ª–æ–π –ø—Ä–æ—Å—Ç–æ–≥–æ Move-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –¥–ª—è –º–∏–Ω—Ç–∞ NFT...');
    // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å Move-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–º (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —É–∂–µ —Å–æ–±—Ä–∞–Ω)
    const contractPath = './sui_nft';
    try {
        const { execSync } = require('child_process');
        const result = execSync(`sui client publish --gas-budget 50000000000 ${contractPath}`, { encoding: 'utf-8' });
        console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç:', result);
    } catch (e) {
        const err = e as Error;
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', err.message || e);
    }
}

// –î–æ–±–∞–≤–∏–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Move-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
async function createTestContract() {
    console.log('üîó –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π Move-–∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –º–∏–Ω—Ç–∞ NFT...');
    const { execSync } = require('child_process');
    try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Move-–ø–∞–∫–µ—Ç
        execSync('sui move new sui_nft', { stdio: 'inherit' });
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª nft.move —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        const nftCode = `
module sui_nft::nft {
    use sui::url::{Self, Url};
    use std::string;
    use sui::object::{Self, UID};
    use sui::transfer;
    use sui::tx_context::{Self, TxContext};

    public struct NFT has key, store {
        id: UID,
        name: string::String,
        description: string::String,
        url: Url,
    }

    public entry fun mint(name: vector<u8>, description: vector<u8>, url: vector<u8>, ctx: &mut TxContext) {
        let nft = NFT {
            id: object::new(ctx),
            name: string::utf8(name),
            description: string::utf8(description),
            url: url::new_unsafe_from_bytes(url),
        };
        let sender = tx_context::sender(ctx);
        transfer::public_transfer(nft, sender);
    }

    public entry fun transfer(nft: NFT, recipient: address) {
        transfer::transfer(nft, recipient);
    }
}
`;
        require('fs').writeFileSync('./sui_nft/sources/nft.move', nftCode);
        console.log('‚úÖ –ö–æ–Ω—Ç—Ä–∞–∫—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ –ø–∞–ø–∫–µ ./sui_nft!');
    } catch (e) {
        const err = e as Error;
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:', err.message || e);
    }
}

async function main() {
    console.log('üöÄ NFT Minting Script Started');
    console.log(`Mode: ${TEST_MODE ? 'TEST' : 'PRODUCTION'}`);
    console.log(`Network: ${SUI_NETWORK}`);
    console.log(`Target mint time: ${MINT_TIME.toLocaleString()}`);
    console.log(`Collection: Xociety`);
    console.log(`Package ID: ${NFT_PACKAGE_ID}`);

    const privateKeys = getPrivateKeysFromEnv();
    if (privateKeys.length === 0) {
        console.error('‚ùå –ù–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ .env!');
        return;
    }

    // –°–æ–∑–¥–∞—ë–º keypair –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª—é—á–∞
    const keypairs = privateKeys.map((key, idx) => {
        try {
            const keypair = Ed25519Keypair.fromSecretKey(key);
            const address = keypair.getPublicKey().toSuiAddress();
            console.log(`üë§ –ê–∫–∫–∞—É–Ω—Ç #${idx + 1}: ${address}`);
            return keypair;
        } catch (e) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º #${idx + 1}:`, e);
            return null;
        }
    }).filter(Boolean) as Ed25519Keypair[];

    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –º–∏–Ω—Ç–∞...');
    await waitForMintTime();

    // –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    console.log('üé® –ù–∞—á–∏–Ω–∞–µ–º –º–∏–Ω—Ç...');
    await Promise.all(
        keypairs.map(async (keypair) => {
            const tx = await prepareMintTransaction(keypair);
            return executeMintTransaction(keypair, tx);
        })
    );
}

main().catch(console.error); 